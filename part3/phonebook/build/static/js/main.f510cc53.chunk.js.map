{"version":3,"sources":["components/ContactsFilter.js","components/ContactForm.js","components/Contact.js","components/SuccessNotification.js","components/ErrorNotification.js","services/contacts.js","App.js","index.js"],"names":["ContactsFilter","filter","hfilter","value","onChange","placeholder","ContactForm","submit","name","hname","phone","hphone","onSubmit","type","Contact","props","onClick","removeContact","SuccessNotification","message","style","color","bacground","fontSize","borderStyle","borderRadius","padding","marginBottom","ErrorNotification","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","App","useState","persons","setPersons","newName","setNewName","newPhone","setNewPhone","filterName","setNewFilter","okMessage","setOkMessage","errorMessage","setErrorMessage","useEffect","console","log","contactService","intialContacts","window","confirm","contact","find","p","resultList","returnedContact","catch","error","setTimeout","n","event","target","preventDefault","dupl","toUpperCase","contactObject","number","concat","alert","map","content","includes","key","showContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f510cc53.chunk.js","sourcesContent":["import React from 'react'\nexport const ContactsFilter = ({ filter, hfilter }) => {\n    return (\n        <div>\n            filter shown with: <input value={filter} onChange={hfilter} placeholder='enter search'/>\n        </div>\n    )\n}\n","import React from 'react';\nexport const ContactForm = ({ submit, name, hname, phone, hphone }) => {\n    return (<form onSubmit={submit}>\n        <div>\n            name: <input type='text' value={name} onChange={hname} placeholder='Enter contact name' />\n        </div>\n        <div>\n            number: <input type='number' value={phone} onChange={hphone} placeholder='Enter contact number' />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>);\n};\n","import React from 'react';\nexport const Contact = (props) => {\n    //console.log(props)\n    return (\n    <p>\n        {props.name} {props.phone} <button onClick={props.removeContact}>delete</button>\n    </p>\n    )\n}\n","import React from 'react'\n\nconst SuccessNotification = ({ message }) => {\n\n    const notificationStyle ={\n        color: 'green',\n        bacground: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    if(message === null){\n        return null\n    }\n\n    return(\n        <div style={notificationStyle}>\n            {message}\n        </div>\n    )\n}\n\nexport default SuccessNotification","import React from 'react'\n\nconst ErrorNotification = ({ message }) => {\n\n    const notificationStyle ={\n        color: 'red',\n        bacground: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    if(message === null){\n        return null\n    }\n\n    return(\n        <div style={notificationStyle}>\n            {message}\n        </div>\n    )\n}\n\nexport default ErrorNotification","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst addContact = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n \nexport default { getAll, addContact, remove, update }","import React, { useState, useEffect } from 'react'\n\n\nimport { ContactsFilter } from './components/ContactsFilter'\nimport { ContactForm } from './components/ContactForm'\nimport { Contact } from './components/Contact'\nimport  SuccessNotification  from './components/SuccessNotification'\nimport ErrorNotification from './components/ErrorNotification'\n\nimport contactService from './services/contacts'\n\n\nexport const App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newPhone, setNewPhone] = useState('')\n    const [filterName, setNewFilter] = useState('')\n    const [okMessage, setOkMessage] = useState(null)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        console.log('effect')\n        contactService\n            .getAll()\n            .then(intialContacts => {\n                setPersons(intialContacts)\n            })\n    }, [])\n    //console.log(`render ${persons.length} persons`)\n    //console.log(persons)\n\n    const addNew = (event) => {\n        event.preventDefault()\n\n        if(!newName || !newPhone){\n            alert('Name and or number are empty')\n        }else{\n\n            const dupl = persons.find(p => p.name.toUpperCase() === newName.toUpperCase())\n            console.log(dupl)\n            \n            if(dupl){\n                if(window.confirm('Want to update the contact?')){\n                    const contactObject = {\n                        name: newName,\n                        number: newPhone,\n                    }\n                    const resultList = persons.filter( p => p.id !== dupl.id)\n                    contactService\n                        .update(dupl.id, contactObject)\n                        .then(returnedContact => {\n                            setPersons(resultList.concat(returnedContact))\n                            setNewName('')\n                            setNewPhone('')\n                        })\n                        .then(() => {\n                            setOkMessage(`Contact ${contactObject.name} updated`)\n                            setTimeout(()=>{\n                                setOkMessage(null)\n                            }, 5000)\n                        }) \n                }\n            }else{\n                const contactObject = {\n                    name: newName,\n                    number: newPhone,\n                }\n\n                contactService\n                    .addContact(contactObject)\n                    .then(returnedContact => {\n                        setPersons(persons.concat(returnedContact))\n                        setNewName('')\n                        setNewPhone('')\n                    })\n                    .then(() => {\n                        setOkMessage(`Contact ${contactObject.name} succesfully added`)\n                        setTimeout(() => {\n                            setOkMessage(null)\n                        }, 5000)\n                    })\n            }\n        }\n      \n    }\n    \n    const removeContact = id => {\n        console.log(id)\n        if(window.confirm('Do you realy want to delete the contact?')){\n            const contact = persons.find(p => p.id === id )\n            const resultList = persons.filter( p => p.id !== id)\n            console.log(contact)\n            contactService\n                .remove(contact.id)\n                .then(returnedContact => {\n                    console.log(returnedContact)\n                    setPersons(resultList)\n                })\n                .catch(error => {\n                    setErrorMessage(`Information of ${contact.name} has already been removed from server`)\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                    setPersons(persons.filter(n => n.id !== id))\n                }) \n        }\n    }\n\n    const showContacts = () => {\n        //console.log(props.list)\n        //console.log(props.filter)\n        if (!filterName) {\n            const conts = () => persons.map(content => {\n                return <Contact name={content.name} phone={content.number} removeContact={()=>removeContact(content.id)} key={content.id} />\n            })\n            return (<div> {conts()} </div>)\n        }\n        else {\n            const conts = () => persons.map(content => {\n                if (content.name.toUpperCase().includes(filterName.toUpperCase())) {\n                    console.log(content.id)\n                    return <Contact name={content.name} phone={content.number} removeContact={()=>removeContact(content.id)} key={content.id} />;\n                }\n            })\n            return (<div> {conts()} </div>)\n        }\n    }\n\n    const handleNewName = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleNewPhone = (event) => {\n        console.log(event.target.value)\n        setNewPhone(event.target.value)\n    }\n\n    const handleFilter = (event) => {\n        console.log(event.target.value)\n        setNewFilter(event.target.value)\n    }\n    \n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n                <ContactsFilter filter={filterName} hfilter={handleFilter}/>\n\n            <h3>Add new contact </h3>\n                <SuccessNotification message={okMessage} />\n                <ErrorNotification message={errorMessage} />\n                <ContactForm submit={addNew} name={newName} hname={handleNewName} phone={newPhone} hphone={handleNewPhone} />\n            \n            <h3>Contacts</h3>\n                {showContacts()}\n                \n       </div>);\n}\n\n/*\n<ShowContacts list={persons} filter={filterName} removeContact={removeContact}/>\n*/\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { App } from './App'\n\nReactDOM.render( <App />, document.getElementById('root'))"],"sourceRoot":""}